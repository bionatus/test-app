<?php

namespace Tests\Unit\Policies\LiveApi\V1\Order;

use App\Models\ItemOrder;
use App\Models\Order;
use App\Models\OrderDelivery;
use App\Models\OrderSubstatus;
use App\Models\Staff;
use App\Models\Substatus;
use App\Policies\LiveApi\V1\OrderPolicy;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;
use Tests\TestCase;

class ReopenTest extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_allows_the_processor_to_reopen_an_order()
    {
        $processor = Staff::factory()->createQuietly();
        $order     = Order::factory()->usingSupplier($processor->supplier)->pendingApproval()->create([
            'working_on_it' => 'John Doe',
        ]);
        OrderDelivery::factory()->usingOrder($order)->create([
            'date'       => Carbon::now(),
            'start_time' => Carbon::createFromTime(9)->format('H:i'),
            'end_time'   => Carbon::createFromTime(12)->format('H:i'),
        ]);
        ItemOrder::factory()->usingOrder($order)->count(3)->create(['status' => ItemOrder::STATUS_AVAILABLE]);

        $policy = new OrderPolicy();

        $this->assertTrue($policy->reopen($processor, $order));
    }

    /** @test */
    public function it_disallows_another_user_to_reopen_an_order()
    {
        $anotherProcessor = Staff::factory()->createQuietly();
        $order            = Order::factory()->pendingApproval()->createQuietly([
            'working_on_it' => 'John Doe',
        ]);
        OrderDelivery::factory()->usingOrder($order)->create([
            'date'       => Carbon::now(),
            'start_time' => Carbon::createFromTime(9)->format('H:i'),
            'end_time'   => Carbon::createFromTime(12)->format('H:i'),
        ]);
        ItemOrder::factory()->usingOrder($order)->count(3)->create(['status' => ItemOrder::STATUS_AVAILABLE]);

        $policy = new OrderPolicy();

        $this->assertFalse($policy->reopen($anotherProcessor, $order));
    }

    /** @test */
    public function it_disallows_the_processor_to_reopen_an_order_with_pending_items()
    {
        $processor = Staff::factory()->createQuietly();
        $order     = Order::factory()->usingSupplier($processor->supplier)->pendingApproval()->create([
            'working_on_it' => 'John Doe',
        ]);
        OrderDelivery::factory()->usingOrder($order)->create([
            'date'       => Carbon::now(),
            'start_time' => Carbon::createFromTime(9)->format('H:i'),
            'end_time'   => Carbon::createFromTime(12)->format('H:i'),
        ]);
        ItemOrder::factory()->usingOrder($order)->create(['status' => ItemOrder::STATUS_AVAILABLE]);
        ItemOrder::factory()->usingOrder($order)->create(['status' => ItemOrder::STATUS_PENDING]);

        $policy = new OrderPolicy();

        $this->assertFalse($policy->reopen($processor, $order));
    }

    /** @test
     * @param string|null $assignment
     * @param Carbon|null $date
     * @param string      $status
     *
     * @dataProvider invalidOrderDataProvider
     */
    public function it_disallows_the_processor_to_reopen_an_invalid_order(
        ?string $assignment,
        ?Carbon $date,
        int $substatusId
    ) {
        $processor = Staff::factory()->createQuietly();
        $order     = Order::factory()->usingSupplier($processor->supplier)->create([
            'working_on_it' => $assignment,
        ]);

        OrderSubstatus::factory()->usingOrder($order)->usingSubstatusId($substatusId)->create();
        OrderDelivery::factory()->usingOrder($order)->create([
            'date'       => $date,
            'start_time' => Carbon::createFromTime(9)->format('H:i'),
            'end_time'   => Carbon::createFromTime(12)->format('H:i'),
        ]);
        ItemOrder::factory()->usingOrder($order)->count(3)->create(['status' => ItemOrder::STATUS_AVAILABLE]);

        $policy = new OrderPolicy();

        $this->assertFalse($policy->reopen($processor, $order));
    }

    public function invalidOrderDataProvider(): array
    {
        return [
            'invalid working_on_it' => [null, Carbon::now(), Substatus::STATUS_PENDING_APPROVAL_FULFILLED],
            'invalid availability'  => ['fake working-on-it', null, Substatus::STATUS_PENDING_APPROVAL_FULFILLED],
            'invalid status'        => [
                'fake-working-on-it',
                Carbon::now(),
                Substatus::STATUS_APPROVED_AWAITING_DELIVERY,
            ],
        ];
    }
}
